#version 460
#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_GOOGLE_include_directive : enable
#include "shader_structures.glsl"



layout (set = 0, binding = 0) uniform UniformBlock { matrices_and_user_input uboMatricesAndUserInput; };
layout (set = 0, binding = 1) buffer writeonly KBuffer{ uint64_t data[]; } kBuffer;

#define WORKGROUP_SIZE          16
layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;
void main()
{
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	ivec3 imgSize = ivec3(uboMatricesAndUserInput.kBufferInfo.xyz);
	if (any(greaterThanEqual(coord, imgSize.xy))) return;

	for(int i = 0; i < imgSize.z; ++i)
	{
		uint index = coord.x + coord.y * imgSize.x + i * (imgSize.x * imgSize.y);
		kBuffer.data[index] = packUint2x32(uvec2(0xFFFFFFFFu, 0xFFFFFFFFu));
	}
	
}

